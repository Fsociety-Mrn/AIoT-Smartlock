# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Face_Recognition.JoloRecognition import JoloRecognition as JL

import os
import cv2
import time

class Ui_SmartAIoT(object):
    def setupUi(self, SmartAIoT):
        
        # camera
        self.camera = False
        self.capture = 1
        
        # open camera
        self.cap = cv2.VideoCapture(1) if cv2.VideoCapture(1).isOpened() else cv2.VideoCapture(0)
        self.cap.set(4,1080)
        
        # face detector
        self.face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        
        # message box
        self.MessageBox = QtWidgets.QMessageBox()
        self.MessageBox.setStyleSheet("""
            QMessageBox { 
                text-align: center;
            }
            QMessageBox::icon {
                subcontrol-position: center;
            }
            QPushButton { 
                width: 250px; 
                height: 30px; 
                font-size: 15px;
            }
        """)
        
        # form layout
        SmartAIoT.setObjectName("SmartAIoT")
        SmartAIoT.setWindowModality(QtCore.Qt.ApplicationModal)
        SmartAIoT.resize(565, 591)
        SmartAIoT.setStyleSheet("background-color:rgb(0, 0, 127)")
        SmartAIoT.setAnimated(False)
        SmartAIoT.setDocumentMode(True)
        self.SmartAIoT_3 = QtWidgets.QWidget(SmartAIoT)
        self.SmartAIoT_3.setObjectName("SmartAIoT_3")
        
        # video
        self.label = QtWidgets.QLabel(self.SmartAIoT_3)
        self.label.setGeometry(QtCore.QRect(10, 210, 541, 361))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        
        # Timer
        self.timer = QtCore.QTimer(self.SmartAIoT_3)
        self.timer.timeout.connect(self.videoStreaming)
        self.last_recognition_time = time.time()
        
        # Textbox
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.SmartAIoT_3)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 10, 541, 41))
        self.plainTextEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.plainTextEdit.setObjectName("plainTextEdit")
        
        # Button
        self.pushButton = QtWidgets.QPushButton(self.SmartAIoT_3)
        self.pushButton.setGeometry(QtCore.QRect(100, 70, 371, 41))
        self.pushButton.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.button_Create)
        
        # label
        self.label_2 = QtWidgets.QLabel(self.SmartAIoT_3)
        self.label_2.setGeometry(QtCore.QRect(10, 140, 541, 41))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        
        
        SmartAIoT.setCentralWidget(self.SmartAIoT_3)

        self.retranslateUi(SmartAIoT)
        QtCore.QMetaObject.connectSlotsByName(SmartAIoT)
        
        self.timer.start(30)

    def retranslateUi(self, SmartAIoT):
        _translate = QtCore.QCoreApplication.translate
        
        # window name
        SmartAIoT.setWindowTitle(_translate("SmartAIoT", "Facial Registration"))
        
        # video
        self.label.setText(_translate("SmartAIoT", "camera disbale"))
        
        # textfield
        self.pushButton.setText(_translate("SmartAIoT", "Create folder"))
        
        # label
        self.label_2.setText(_translate("SmartAIoT", "Create folder name first"))

    # Message Box 
    def messageBoxShow(self, Icon=None, Title= None , Text= None,Buttons=None):
        
        # set windows icon
        self.MessageBox.setIcon(Icon)
            
        # set windows title
        self.MessageBox.setWindowTitle(Title)
        
        # set windows text
        self.MessageBox.setText(Text)
        
        # self.MessageBox.setFixedHeight(400) # height
        self.MessageBox.setFixedWidth(400)  # width
        
        # set buttonms
        self.MessageBox.setStandardButtons(Buttons)
    
        
        return self.MessageBox.exec_()
        
        
        
    # create  folder
    def button_Create(self):
              
        path = f"Known_Faces/{self.plainTextEdit.toPlainText()}"
        
        # Check if the folder already exists
        if os.path.exists(path):
            
            self.messageBoxShow(
                Icon=self.MessageBox.Warning,
                Title="Facial Recognition",
                Text="Folder already exists",
                Buttons=self.MessageBox.Ok
            )
            
            pushButton = True
            plainTextEdit = False
            
            self.camera = True
        else:
            
            os.makedirs(path, exist_ok=True)
            self.messageBoxShow(
                Icon=self.MessageBox.Information,
                Title="Facial Recognition",
                Text="Folder Created please align your face to camera properly",
                Buttons=self.MessageBox.Ok
            )
            
            self.camera =False
            pushButton = False
            plainTextEdit = True              
        
        self.pushButton.setEnabled(pushButton)
        self.plainTextEdit.setReadOnly(plainTextEdit)
    
    # videio streaming with facial detection
    def videoStreaming(self):
        ret, frame = self.cap.read()
        
        if ret:
            
            frame = cv2.flip(frame,1)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_detector.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=20, minSize=(100, 100), flags=cv2.CASCADE_SCALE_IMAGE)
            
            current_time = time.time()
            
            
            # Check if at least one face is detected
            if len(faces) > 0:
                
                # Extract coordinates of the first detected face
                x, y, w, h = faces[0]
                
                # If only one face is detected
                if len(faces) == 1:
                     

                    # Draw a green rectangle around the detected face
                    cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                    if self.camera:
                    # ervery 30 seconds save the camera
                        if current_time - self.last_recognition_time >= 0.5:
                        
                            self.last_recognition_time = current_time

                        # save the capture camera if less than 20
                            if self.capture <= 20:
                                path = f"Known_Faces/{self.plainTextEdit.toPlainText()}/{self.capture}.png"
                                cv2.imwrite(path, frame)
                                self.capture +=1
                            
                            
                            else:
                                result =self.messageBoxShow(Title="Facial Registration",
                                                Text="Done capturing facial do you want to add people faces again ?",
                                                Buttons=self.MessageBox.Yes | self.MessageBox.No,
                                                Icon=self.MessageBox.Information)
                            # show the result
                                if result == self.MessageBox.No:
                                
                            
                                    self.label_2.setText("Done Training")
                            
                            
                            # train the facial registration
                                    message = JL().Face_Train()
                            
                            # show the result
                                    self.messageBoxShow(Title="Facial Registration",
                                                Text="Facial training complete" if message == "Successfully trained" else message,
                                                Buttons=self.MessageBox.Ok,
                                                Icon=self.MessageBox.Information if message == "Successfully trained" else self.MessageBox.Warning)
                            # exit the system
                                    QtCore.QCoreApplication.quit()
                                
                                elif result == self.MessageBox.Yes:
                                
                                # video
                                    self.label.setText("camera disable")
        
                                 # create Button
                                    self.pushButton.setText("Create folder")
        
                                # label
                                    self.label_2.setText("Create folder name first")
                                
                                    self.pushButton.setEnabled(True)
                                    self.plainTextEdit.setReadOnly(False)
            
                                    self.camera = False
                                    self.capture = 1
                                
                            
                                
                            if self.camera == True:
                            # Update the label text to indicate a face is detected
                                self.label_2.setText("Training facial" if self.capture == 21 else "Face capture left " + str(21-self.capture))
                            
                    
                    else:
                    
                    # If multiple faces are detected, update the label text to indicate the issue
                        self.label_2.setText("Training facial" if self.capture == 21 else "Multiple faces detected. Please align only one face.")
        
                    # Draw a red rectangle around the first detected face
                        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                else:
                
                # If no faces are detected, update the label text to indicate the issue
                    self.label_2.setText("Training facial" if self.capture == 21 else "No face detected. Please align your face properly.")
                


            img = QtGui.QImage(frame, frame.shape[1], frame.shape[0], QtGui.QImage.Format_RGB888)  # Convert the frame to a QImage
            self.label.setPixmap(QtGui.QPixmap.fromImage(img))  # Set the label pixmap to the QImage
    
    
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SmartAIoT = QtWidgets.QMainWindow()
    ui = Ui_SmartAIoT()
    ui.setupUi(SmartAIoT)
    SmartAIoT.show()
    sys.exit(app.exec_())